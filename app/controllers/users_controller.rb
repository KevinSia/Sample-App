class UsersController < ApplicationController

  before_action :require_login?, only: [:index, :edit, :update, :destroy,
                                        :following, :followers]
  before_action :correct_user? , only: [:edit, :update]
  before_action :admin_user?   , only: :destroy

  def index
    @filterrific = initialize_filterrific(
      User,
      params[:filterrific],
      select_options: {
        sorted_by: User.options_for_sorted_by,
      }
    ) or return
    @users = @filterrific.find.page(params[:page])

    respond_to do |format|
      format.html
      format.js
    end

  end


  # params[:page] is generated by will_paginate
  # def index
  #   @users = User.where(activated: true).paginate(page: params[:page])
  # end

  def show
    @user = User.find(params[:id])
    @microposts = @user.microposts.paginate(page: params[:page])
    unless @user.activated
      redirect_to root_url
      flash[:info] = "User is not activated."
    end
  end

  def new
  	@user = User.new
  end

  def create
    @user = User.new(user_params)
    if @user.save
      @user.send_activation_email
      flash[:info] = "Please check your registered email to activate account"
      redirect_to root_url
    else
      render 'new'
    end
  end

  def edit
  end

  def update
    if @user.update_attributes(user_params)
      flash[:success] = "Updated successfully!"
      redirect_to @user
    else
      render 'edit'
    end
  end

  def destroy
    User.find(params[:id]).destroy
    flash[:success] = "Deleted successfully"
    redirect_to users_url
  end

  def following
    @title = "Following"
    @user = User.find(params[:id])
    @users = @user.following.paginate(page: params[:page])
    render 'show_follow'
  end

  def followers
    @title = "Followers"
    @user = User.find(params[:id])
    @users = @user.followers.paginate(page: params[:page])
    render 'show_follow'
  end

  # to avoid mass assignment that can be done using command line HTTP client
  # private keeps method from exposing to external users (used internally by Users)
  # example : admin access
  private

  def user_params
    params.require(:user).permit(:name, :description ,:email ,:password , :password_confirmation)
  end

  # user who have logged in => current_user
  # user of the profile     => @user
  def correct_user?
    @user = User.find(params[:id])
    redirect_to(root_url) unless current_user?(@user)
  end

  def admin_user?
    redirect_to(root_url) unless current_user.admin?
  end
end
